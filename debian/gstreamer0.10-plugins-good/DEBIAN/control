Package: gstreamer0.10-plugins-good
Source: gst-plugins-good0.10
Version: 0.10.29-0maemo24+0m8
Architecture: armel
Maintainer: Maemo Multimedia <multimedia@maemo.org>
Installed-Size: 1716
Depends: gconf2 (>= 2.10.1-2), libbz2-1.0, libc6 (>= 2.7), libflac8, libgcc1 (>= 1:4.1.1), libglib2.0-0 (>= 2.24.0), libgstreamer-plugins-base0.10-0 (>= 0.10.34), libgstreamer0.10-0 (>= 0.10.34), libice6 (>= 1:1.0.0), libjpeg62, libpng12-0 (>= 1.2.13-4), libpulse0 (>= 0.9.19), libsm6, libsoup2.4-1, libspeex1 (>= 1.2~beta3-1), libx11-6 (>= 0), libxdamage1 (>= 1:1.1), libxext6 (>= 0), libxfixes3 (>= 1:4.0.1), libxml2 (>= 2.6.27), libxv1, zlib1g (>= 1:1.1.4), gstreamer0.10-plugins-base (>= 0.10.32.1)
Breaks: ngfd (<< 0.25)
Replaces: gstreamer0.10-plugins-bad (<< 0.10.21-git364-0maemo1), gstreamer0.10-plugins-good-extra (<< 0.10.25.5-0maemo1), gstreamer0.10-plugins-good-extra-formats
Provides: gstreamer0.10-audiosink, gstreamer0.10-audiosource, gstreamer0.10-videosink, gstreamer0.10-videosource
Section: libs
Priority: optional
Description: GStreamer plugins from the "good" set
 GStreamer is a streaming media framework, based on graphs of filters
 which operate on media data.  Applications using this library can do
 anything from real-time sound processing to playing videos, and just
 about anything else media-related.  Its plugin-based architecture means
 that new data types or processing capabilities can be added simply by
 installing new plug-ins.
 .
 This package contains the GStreamer plugins from the "good" set, a set
 of good-quality plug-ins under the LGPL license.
Aegis-Manifest: empty
Gstreamer-Decoders: application/x-3gp; application/x-apetag; application/x-icy; application/x-id3; application/x-rtcp; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], encoding-name=(string){ AMR, AMR-WB }, encoding-params=(string)1, octet-align=(string)1, crc=(string){ 0, 1 }, robust-sorting=(string)0, interleaving=(string)0; application/x-rtp, media=(string){ video, audio, application }, payload=(int)[ 96, 127 ], encoding-name=(string)MPEG4-GENERIC, streamtype=(string){ 4, 5 }, mode=(string){ generic, CELP-cbr, CELP-vbr, AAC-lbr, AAC-hbr }; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], encoding-name=(string)SPEEX, encoding-params=(string)1; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], encoding-name=(string)SIREN, dct-length=(int)320; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], encoding-name=(string)ILBC, mode=(string){ 20, 30 }; application/x-rtp, media=(string){ video, audio }, payload=(int)[ 96, 127 ], encoding-name=(string)DV, encode=(string){ SD-VCR/525-60, SD-VCR/625-50, HD-VCR/1125-60, HD-VCR/1250-50, SDL-VCR/525-60, SDL-VCR/625-50, 306M/525-60, 306M/625-50, 314M-25/525-60, 314M-25/625-50, 314M-50/525-60, 314M-50/625-50 }; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], encoding-name=(string){ RAW, THEORA, X-SV3V-ES, X-SORENSON-VIDEO, X-SORENSONVIDEO, X-SorensonVideo, MP4V-ES, MP2T-ES, MP1S, JPEG, JPEG2000, H264, H263, H263-2000, MPV, H263-1998 }; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], encoding-name=(string){ VORBIS, X-QDM, QCELP, MP4A-LATM, L16, MPA-ROBUST, X-MP3-DRAFT-00, X-MP3-DRAFT-01, X-MP3-DRAFT-02, X-MP3-DRAFT-03, X-MP3-DRAFT-04, X-MP3-DRAFT-05, X-MP3-DRAFT-06, MPA, PCMU, PCMA, GSM, G729, G726, G726-16, G726-24, G726-32, G726-40, AAL2-G726-16, AAL2-G726-24, AAL2-G726-32, AAL2-G726-40, G723, G722, CELT, BV16, BV32, AC3 }; application/x-rtp, media=(string)other, payload=(int)[ 96, 127 ], encoding-name=(string)MP1S; application/x-rtp, media=(string)video, payload=(int)34, encoding-name=(string)H263; application/x-rtp, media=(string)application, payload=(int)[ 96, 127 ], encoding-name=(string)X-GST; application/x-rtp, media=(string)audio, payload=(int){ 12, 10, 11, 14, 0, 8, 3, 18, 4, 9 }; application/x-rtp, media=(string)video, payload=(int){ 33, 26, 32 }; application/x-subtitle-avi; audio/ac3, framed=(boolean)false; audio/mpeg, mpegversion=(int)1, parsed=(boolean)false; audio/mpeg, framed=(boolean)false, mpegversion=(int){ 2, 4 }; audio/x-ac3, framed=(boolean)false; audio/x-alaw; audio/x-amr-nb-sh; audio/x-amr-wb-sh; audio/x-dts, framed=(boolean)false; audio/x-eac3, framed=(boolean)false; audio/x-flac; audio/x-m4a; audio/x-mulaw; audio/x-speex; audio/x-wav; image/jpeg; image/png; video/mj2; video/quicktime; video/webm; video/x-flv; video/x-matroska; video/x-msvideo; video/x-smoke
Gstreamer-Elements: 3gppmux, aacparse, ac3parse, alawdec, alawenc, amrparse, apedemux, asteriskh263, autoaudiosink, autoaudiosrc, autovideosink, autovideosrc, avidemux, avimux, avisubtitle, dcaparse, dynudpsink, flacdec, flacenc, flacparse, flactag, flvdemux, flvmux, gppmux, gstrtpbin, gstrtpjitterbuffer, gstrtpptdemux, gstrtpsession, gstrtpssrcdemux, icydemux, id3demux, ismlmux, jpegdec, jpegenc, matroskademux, matroskamux, matroskaparse, mj2mux, mp4mux, mpegaudioparse, mulawdec, mulawenc, multiudpsink, notqtdemux, pngdec, pngenc, pulsemixer, pulsesink, pulsesrc, qtmoovrecover, rtpL16depay, rtpL16pay, rtpac3depay, rtpac3pay, rtpamrdepay, rtpamrpay, rtpbvdepay, rtpbvpay, rtpceltdepay, rtpceltpay, rtpdec, rtpdepay, rtpdvdepay, rtpdvpay, rtpg722depay, rtpg722pay, rtpg723depay, rtpg723pay, rtpg726depay, rtpg726pay, rtpg729depay, rtpg729pay, rtpgsmdepay, rtpgsmpay, rtpgstdepay, rtpgstpay, rtph263depay, rtph263pay, rtph263pdepay, rtph263ppay, rtph264depay, rtph264pay, rtpilbcdepay, rtpilbcpay, rtpj2kdepay, rtpj2kpay, rtpjpegdepay, rtpjpegpay, rtpmp1sdepay, rtpmp2tdepay, rtpmp2tpay, rtpmp4adepay, rtpmp4apay, rtpmp4gdepay, rtpmp4gpay, rtpmp4vdepay, rtpmp4vpay, rtpmpadepay, rtpmpapay, rtpmparobustdepay, rtpmpvdepay, rtpmpvpay, rtppcmadepay, rtppcmapay, rtppcmudepay, rtppcmupay, rtpqcelpdepay, rtpqdm2depay, rtpsirendepay, rtpsirenpay, rtpspeexdepay, rtpspeexpay, rtpsv3vdepay, rtptheoradepay, rtptheorapay, rtpvorbisdepay, rtpvorbispay, rtpvrawdepay, rtpvrawpay, rtspsrc, smokedec, smokeenc, souphttpsrc, speexdec, speexenc, udpsink, udpsrc, v4l2radio, v4l2sink, v4l2src, wavparse, webmmux, ximagesrc
Gstreamer-Encoders: application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], encoding-name=(string){ AMR, AMR-WB }, encoding-params=(string)1, octet-align=(string)1, crc=(string)0, robust-sorting=(string)0, interleaving=(string)0, mode-set=(int)[ 0, 7 ], mode-change-period=(int)[ 1, 2147483647 ], mode-change-neighbor=(string){ 0, 1 }, maxptime=(int)[ 20, 2147483647 ], ptime=(int)[ 20, 2147483647 ]; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], encoding-name=(string)RAW, sampling=(string){ RGB, RGBA, BGR, BGRA, YCbCr-4:4:4, YCbCr-4:2:2, YCbCr-4:2:0, YCbCr-4:1:1 }, colorimetry=(string){ BT601-5, BT709-2, SMPTE240M }; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], encoding-name=(string)SIREN, bitrate=(string)16000, dct-length=(int)320; application/x-rtp, media=(string){ video, audio, application }, payload=(int)[ 96, 127 ], encoding-name=(string)MPEG4-GENERIC, streamtype=(string){ 4, 5 }, mode=(string){ generic, CELP-cbr, CELP-vbr, AAC-lbr, AAC-hbr }; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], encoding-name=(string)SPEEX, encoding-params=(string)1; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], encoding-name=(string)ILBC, mode=(string){ 20, 30 }; application/x-rtp, media=(string){ video, audio }, payload=(int)[ 96, 127 ], encoding-name=(string)DV, encode=(string){ SD-VCR/525-60, SD-VCR/625-50, HD-VCR/1125-60, HD-VCR/1250-50, SDL-VCR/525-60, SDL-VCR/625-50, 306M/525-60, 306M/625-50, 314M-25/525-60, 314M-25/625-50, 314M-50/525-60, 314M-50/625-50 }; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], encoding-name=(string){ VORBIS, MP4A-LATM, L16, MPA, PCMA, PCMU, GSM, G729, G726-16, G726-24, G726-32, G726-40, AAL2-G726-16, AAL2-G726-24, AAL2-G726-32, AAL2-G726-40, G723, CELT, BV16, BV32, AC3 }; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], encoding-name=(string){ THEORA, MP4V-ES, MP2T-ES, JPEG2000, H264, H263, H263-1998, H263-2000 }; application/x-rtp, media=(string)audio, encoding-name=(string)L16, payload=(int){ 10, 11 }; application/x-rtp, media=(string)video, payload=(int)26, encoding-name=(string)JPEG; application/x-rtp, media=(string)video, payload=(int)34, encoding-name=(string)H263; application/x-rtp, media=(string)video, payload=(int)32, encoding-name=(string)MPV; application/x-rtp, media=(string)audio, payload=(int)8, encoding-name=(string)PCMA; application/x-rtp, media=(string)audio, payload=(int)0, encoding-name=(string)PCMU; application/x-rtp, media=(string)audio, payload=(int)3, encoding-name=(string)GSM; application/x-rtp, media=(string)audio, payload=(int)18, encoding-name=(string)G729; application/x-rtp, media=(string)audio, payload=(int)4, encoding-name=(string)G723; application/x-rtp, media=(string)audio, encoding-name=(string)G722, payload=(int)9; application/x-rtp, media=(string)application, payload=(int)[ 96, 127 ], encoding-name=(string)X-GST; application/x-rtp, media=(string)audio, payload=(int)14; audio/x-alaw; audio/x-flac; audio/x-mulaw; audio/x-speex; image/jpeg; image/png; video/mj2; video/quicktime, variant=(string){ iso, 3gpp }; video/webm; video/x-flv; video/x-matroska; video/x-msvideo; video/x-smoke
Gstreamer-Uri-Sinks: udp
Gstreamer-Uri-Sources: http, https, radio, rtsp, rtsp-sdp, rtsph, rtspt, rtspu, udp, v4l2
Gstreamer-Version: 0.10
Original-Maintainer: Maintainers of GStreamer packages <pkg-gstreamer-maintainers@lists.alioth.debian.org>
Original-Uploaders: Loic Minier <lool@dooz.org>,
           Sebastian Dr√∂ge <slomo@debian.org>,
           Sjoerd Simons <sjoerd@debian.org>
